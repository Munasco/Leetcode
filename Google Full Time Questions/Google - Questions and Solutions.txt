Sample question:

We are given a string S consisting of N characters and an integer K. The string represents a software license key which we would like to format. The string is composed of alphanumerical characters and/or dashes. The dashes split the alphanumerical characters within the string into groups (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.

We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert the dashes. Additionally, all the lower case letters in the string must be converted to upper case.

For example, in the license key "2-4A0r7-4k" there are two dashes which split it into three groups of lengths 1, 5 and 2, respectively. If we want each group to be of length 4, then we would have to reinsert the dashes. Thus, for K = 4, the correctly formatted string is "24A0-R74K".

Write a function:

class Solution { public String solution(String S, int K); }

that, given a non-empty string S consisting of N characters, representing a license key to format, and an integer K, returns the license key formatted according to the description above.

For example, given S = "2-4A0r7-4k" and K = 4, the function should return "24A0-R74K", and for K = 3, the function should return "24-A0R-74K" as the first group could be shorter. Given S = "r" and K = 1, the function should return "R".

Write an efficient algorithm for the following assumptions:

N and K are integers within the range [1..300,000];
string S consists only of alphanumerical characters (a−z and/or A−Z and/or 0−9) and/or dashes (-);
string S contains at least one alphanumerical character.

Solution: 

public class Solution {
    public String licenseKeyFormatting(String s, int K) {
        StringBuilder sb = new StringBuilder();
        s = s.replace("-", "");
        String s1 = s.toUpperCase();
        
        Stack stk = new Stack();
        for(int i = 0; i<s1.length();i++)
        {
            stk.push(s1.charAt(i));
        }
        
        int count = 0;
        char[] s2 = s1.toCharArray();
        
        while(!stk.empty())
        {
            count++;
            if(count != K+1)
            {
                sb.append(stk.peek());
                stk.pop();
            }
            if(count == K+1)
            {
                count = 0;
                sb.append("-");
                continue;
            }
        }
        //System.out.println(sb.toString());
        return sb.reverse().toString();
    }
}



Q2. Refer Image 1

SOLUTION: 

// you can also use imports, for example:
import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(String[] L) {
        HashMap<String, ArrayList<String>> map = new HashMap<>();
        Solution s = new Solution();
        int count = 0;
        
        //Iterate over each element given to us and reduce it
        for(String email: L)
        { 
          String reducedEmail = s.reduceEmail(email);  
         
         //If reduced email string exists in the map then add the given email to it's arraylist
         //Else create a new arraylist and start adding the email addresses to it
          if(map.containsKey(reducedEmail))
          {
              ArrayList al = map.get(reducedEmail);
              al.add(email);
              map.put(reducedEmail, al);
          }
          else
          {
              ArrayList al = new ArrayList<String>();
              al.add(email);
              map.put(reducedEmail, al);
          }
        }
        
      //Get all the email addresses which are having more than one element in it's list
      for(ArrayList al : map.values())
        {
            if(al.size() > 1)
                count++;
        }
       return count;
    }
    
    public String reduceEmail(String email)
    {   
        //We are trying to reduce the all the given emails to standard email format
        String localName = email.split("@")[0];
        String domainName = email.split("@")[1];
       
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i < localName.length(); i++)
        {
            if(localName.charAt(i)!= '.' && localName.charAt(i)!= '+')
                sb.append(localName.charAt(i));
            else
                if(localName.charAt(i) == '+')
                    break;
        }
        
        return sb.append("@").append(domainName).toString();

        //FINAL ANSWER : 2
    }
}


Q3. Refer Image 2

public class Solution 
{      
    public static void main(String[] args) 
    {
       int[] A = {1, 2, 1, 2, 1, 2, 1}; //output = 7
       //int[] A = {1,2,1,3,4,3,5,1,2}; //output = 3
        System.out.println(solution(A));;
    }
    
    static int solution(int[] a)
    {
        int i =-1, j=-1;
        int currUniqueCount = 0;
        int currSum = 0;
        int maxSum = 0;
        int index = 1;
        int max = Integer.MIN_VALUE;
        
        //Check if we have are having a change of element between two consecutive elements. 
        //Store the count for the continous appearance for the a particular element in the given array. 
        
        i =0 ;
        while(a[index] == a[i])
        {
            index++;
            currUniqueCount++;
            currSum++;
            maxSum++;
        }
        
        j = index + 1;
        while(a[index] == a[j])
        {
            index++;
            currUniqueCount++;
            currSum++;
            maxSum++;
        }
        
        
        while(index < a.length)
        {
            if(a[index] != a[index - 1])
            {
                if(a[index] == a[i] || a[index] == a[j])
                {
                    //Change i and j whenever we get new different element. 
                    //Since we can store only 2 fruit types, so using i and j to get when the type of fruit is changed 
                    currUniqueCount = 1;
                    if(i < j)
                        i = index;
                    else
                        j = index;
                    
                    currSum++;
                
                    max = currSum + maxSum; 
                    maxSum = Math.max(currSum, maxSum);
                }
                else
                {
                    currSum = currUniqueCount++;
                    currUniqueCount = 1;
                    
                    max = currSum + maxSum;
                    maxSum = Math.max(currSum, maxSum);
                  
                    if(i<j)
                        i = index;
                    else
                        j = index;
                }
            }
             index++;
        }
       
        return max;
        
    }
    
        
}