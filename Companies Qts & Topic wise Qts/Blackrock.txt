
------------Black Rock --------------------------

Q2 Programming Challenge Description:
A person has taken a loan of $6000.00 for a fixed annual interest rate of 6% for 5 years with no down payment. The monthly payment has been fixed at $116.00 for entire term of the loan. Here is the formula to calculate monthly fixed payment: (NOTE: See attachment)

    P = (monthly rate * Loan amount) / (1 - (1+monthly interest rate)^-n) Here n is no of payment periods.
Write a program to: 1. To calculate monthly payment 2. To print out monthly payment and total interest payment for the duration of loan rounded to its nearest integer


Input:



6000~5~6~0


Output:
$116.00~$960]


Test 1
Test Input Download Test Input30000~10~6~5000
Expected Output Download Test Output$277.55~$8306
Test 2
Test Input Download Test Input25000~10~6~0
Expected Output Download Test Output$277.55~$8306
Test 3
Test Input Download Test Input5000~5~6~0
Expected Output Download Test Output$96.66~$800




Q3.
NAV is the Net Assets Valuation which is the value of the total assets held in a portfolio. Often the portfolio managers try to track a certain benchmark portfolio in terms of the percentage weight of the assets. For instance, consider a portfolio PORT with 3 assets and a benchmark portfolio BENCH with 3 assets:

    PORT                    BENCH
Stock   Qty   Price     Stock     Qty     Price
AXN     10      10        AXN     50      10
BGT     20      30        BGT     30      30
CXZ     10      30        DFG     30      20
The percentage Nav in stock A for PORT can be calculated as follows:

Nav(PORT) = (Qty(AXN) * Price(AXN))+(Qty(BGT) * Price(BGT))+(Qty(CXZ) * Price(CXZ))

%Nav  = (Qty(AXN) * Price(AXN)) * 100 / Nav(PORT)
A Portfolio is said to be overweight in a stock if its %Nav in that stock is larger than the %Nav in the stock in the Benchmark. Alternately, it is underweight in a stock if its %Nav in a stock is less than the benchmark.

Write a program to calculate the difference in the %Nav of the holdings in the PORT and the BENCH.

Sort the portfolios in alphabetical order and display the difference upto 2 decimal points.


Input:
PORT:AXN,10,10;BGT,20,30;CXZ,10,30|BENCH:AXN,50,10;BGT,30,30;DFG,30,20


Output:
AXN:-15.0,BGT:15.0,CXZ:30.0,DFG:-30.0

Test 1
Test Input Download Test InputPORT:AXN,0,10;BGT,20,30;CXZ,10,30|BENCH:AXN,50,10;BGT,30,30;DFG,30,20;XYZ,0,10
Expected Output Download Test OutputAXN:-25.00,BGT:21.67,CXZ:33.33,DFG:-30.00,XYZ:-0.00
Test 2
Test Input Download Test InputPORT:AXN,10,10;BGT,20,30;CXZ,10,30|BENCH:AXN,50,10;BGT,30,30;DFG,30,20
Expected Output Download Test OutputAXN:-15.00,BGT:15.00,CXZ:30.00,DFG:-30.00

Test 1 Input
PORT:AXN,0,10;BGT,20,30;CXZ,10,30|BENCH:AXN,50,10;BGT,30,30;DFG,30,20;XYZ,0,100
Expected Output
AXN:-25.00,BGT:21.67,CXZ:33.33,DFG:-30.00,XYZ:-0.00


SOLUTION: 
import java.util.*;
import java.util.Map.Entry;
import java.text.DecimalFormat;


public class Test 
{
	 public static void main(String[] args)
	    {
		 Scanner sc = new Scanner(System.in);
	        System.out.println("Enter the input");
	        String s = sc.next(); 
	        
	        
	        String s1, s2;
	        double port_nav_percent;
	        double bench_nav_percent;
	        double result;
	        Map<TreeSet<String>,ArrayList<Double>> answer = new HashMap<TreeSet<String>,ArrayList<Double>>();
	        
	        s1=s.substring(0, s.indexOf("|") ).substring(5);
	        s2=s.substring(s.indexOf("|") + 1).substring(6);
	        String[] port = s1.split(";");
	        String[] bench = s2.split(";");
	        
	        Map<String, ArrayList<Integer>> map1 = new HashMap<String, ArrayList<Integer>>();
	        for(String w: port)
	        {
	        	String[] t = w.split(",");
	        	map1.put(t[0], new ArrayList<Integer>(Arrays.asList(Integer.parseInt(t[1]),Integer.parseInt(t[2]))));
	        }
	        
	        Map<String, ArrayList<Integer>> map2 = new HashMap<String, ArrayList<Integer>>();
	        for(String w: bench)
	        {
	        	String[] t = w.split(",");
	        	map2.put(t[0], new ArrayList<Integer>(Arrays.asList(Integer.parseInt(t[1]),Integer.parseInt(t[2]))));
	        }

	        //Correct -----------------------------
	        int port_sum=0;
	        for (Map.Entry<String, ArrayList<Integer>> entry : map1.entrySet())
	        {
	            ArrayList<Integer> value = entry.getValue();
	            port_sum += value.get(0)*value.get(1) ;
	        }    
	        
	        int bench_sum=0;
	        for (Map.Entry<String, ArrayList<Integer>> entry : map2.entrySet())
	        {
	            ArrayList<Integer> value = entry.getValue();
	            bench_sum += value.get(0)*value.get(1) ;
	        }
	        
	        Map<String, Double> mr1 = new HashMap<String, Double>();
	        Map<String, Double> mr2 = new HashMap<String, Double>();
	        
	        for (Map.Entry<String, ArrayList<Integer>> entry : map1.entrySet())
	        {
	            ArrayList<Integer> value = entry.getValue();
	            port_nav_percent = (value.get(0)*value.get(1))*100/port_sum;
	            mr1.put(entry.getKey(), port_nav_percent);
	        
	        }
	      
	        for (Map.Entry<String, ArrayList<Integer>> entry : map2.entrySet())
	        {
	            ArrayList<Integer> value = entry.getValue();
	            bench_nav_percent = (value.get(0)*value.get(1))*100/bench_sum;
	            mr2.put(entry.getKey(), bench_nav_percent);   
	        }
	        
	        compare(mr1,mr2);
	      
 	    }
	 
	 static void compare(Map<String, Double> map1, Map<String, Double> map2)
	 {
		 DecimalFormat df = new DecimalFormat("#.00");
		 TreeSet<String> ts = new TreeSet<>();
		 TreeSet<String> temp = new TreeSet<>();
		 
		 for (Map.Entry<String, Double> m1 : map1.entrySet()) 
			    if(map2.containsKey(m1.getKey()))
			    	{
			    		double result =  m1.getValue() -getresult(m1.getKey(),map2);
			    		
			    		ts.add(m1.getKey() +":"+df.format(result));
			    		temp.add(m1.getKey());
			    		
			    	}
			    else
			    {
			    	ts.add(m1.getKey()+":"+df.format(m1.getValue()));
			    	temp.add(m1.getKey());
			    }
		 
		 String s = check_for_leftout(map2, temp);
		
		 ts.add(s);
		 StringBuilder sb = new StringBuilder();

		 Iterator<String> itr = ts.iterator();
	        while(itr.hasNext())
	        {
	        	sb.append(itr.next()).append(",");
	        }
	        System.out.println(sb.toString().substring(0, sb.length()-1));
		 
		 
	 }
	 
	 static String check_for_leftout(Map<String, Double> map, TreeSet<String> temp)
	 {
		 DecimalFormat df = new DecimalFormat("#.##");
		 String result="";
		 for (Map.Entry<String, Double> m : map.entrySet()) 
		 {
			 
			 if(!temp.contains(m.getKey()))
			 {
				 double value = m.getValue()*-1;
				 double t =  Math.round(m.getValue()*100.00)/100.00;
				 System.out.println(t);
				 result = result+ m.getKey()+":-"+t+",";
			 }
		 }
		 
		 return result.substring(0,result.length()-1);
		 
	 }
	 	static double getresult(String s, Map<String, Double> map)
	 	{
	 		return map.get(s);
	 	}

	 	
	 	//PORT:AXN,10,10;BGT,20,30;CXZ,10,30|BENCH:AXN,50,10;BGT,30,30;DFG,30,20
}








	Q4. 
	Write a program to determine the lowest common ancestor of two nodes in the following binary search tree, which you may hard code in your program:
	              30
	              |
	            --+--
	            |   |
	            8   52
	            |
	          --+--
	          |   |
	          3   20
	              |
	            --+--
	            |   |
	           10   29

	Input:
	Your program should read one line of text from standard input. The line will contain two integers, separated by a space, which represent two nodes within the pictured binary search tree.

	Output:
	Print to standard output the least common ancestor of the two nodes.

	Test 1
	Test Input Download Test Input8 52
	Expected Output Download Test Output30
	Test 2
	Test Input Download Test Input3 29
	Expected Output Download Test Output8

	import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

public class Main {
  /**
   * Iterate through each line of input.
   */
   Node root; 
  public static void main(String[] args) throws IOException {
    InputStreamReader reader = new InputStreamReader(System.in, StandardCharsets.UTF_8);
    BufferedReader in = new BufferedReader(reader);
    String line;
    	String[] nodes ={};
    while ((line = in.readLine()) != null) 
    {
      //System.out.println(line);
       nodes = line.split("\\s");
    }
    
   	
		
		  Main tree = new Main();
      
      //Constructing the tree form the given nodes 
			tree.root = new Node(30);
			tree.root.left = new Node(8);
			tree.root.right = new Node(52);
			
			tree.root.left.left = new Node(3);
			tree.root.left.right = new Node(20);
			tree.root.left.right.left = new Node(10);
			tree.root.left.right.right = new Node(29);
			
    	Node t = tree.lca(tree.root, Integer.parseInt(nodes[0]), Integer.parseInt(nodes[1]));
      System.out.println(t.data);
    
  }
  
		Node lca(Node node, int n1, int n2) 
		{
		   //If there is no node present in the tree or the node is equal to null then return null
			if (node == null)
				return null;

			// If both n1 and n2 are smaller than root, then least common acestor is on left
			if (node.data > n1 && node.data > n2)
				return lca(node.left, n1, n2);

			// If both n1 and n2 are greater than root, then least common acestor is on right
			if (node.data < n1 && node.data < n2) 
				return lca(node.right, n1, n2);

			return node;
		}
}
class Node 
{
  //For constructing the tree, we need a left node and right node. 
  //We need to store the data for each and every node presenet in the tree, so using int data.
	int data;
	Node left, right;

//Constuctor call, so that node is added each time the Node object is added.
	Node(int value) 
	{
		data = value;
		left = right = null; //Initialize the left and right side of the node to null. 
	}
}
