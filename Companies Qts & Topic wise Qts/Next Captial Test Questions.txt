Next Captial Test Questions

Q1. Mine Sweeper
Description
In order to design a ‘Minesweeper’ game, we are writing a script to assign a score value to each cell in an n x n grid.  You will write a function that accepts an n x n array as a parameter - this will represent the location of the mines in the grid.  Your function should return the value of each cell, as another n x n array.

 

Each rule should be applied in order, and applying a rule to a cell may affect or replace the outcome of previous rules.  

 

The rules are as follows:

 

A cell is worth one point for each mine it is adjacent to.  (A cell is ‘adjacent’ to a mine if it either shares a side with a mine, or a corner.)

Cells directly below a mine are worth 2 points.

Cells directly to the right of a mine are worth 0 points.

Assuming cell positions are zero-indexed, cells that are in an odd row (1,3,5,...) with one or more mines in the same row are worth triple.

Cells that share corners with one or more mines are worth double.

Cells that contain mines are worth -1 points.

 

Input Format
The input puzzleArray will be an n x n array, where elements are strings that are either "." (indicating there is no mine at that location) or "m" (indicating a mine).

 

Output Format
Return an n x n array of integers, where elements are the correct numerical scores for each corresponding cell in the input array after applying the rules described above.

 

Example
Example Input:

[ ['.','m','.','.'],
  ['.','.','.','.'],
  ['.','.','.','m'],
  ['m','.','.','.'] ]
 

Example Output:

 [ [1, -1, 0, 0],
   [2, 2, 4, 1],
   [1, 2, 1, -1],
   [-1, 0, 6, 6] ]
 

Explanation:
Assume ordered pairs given for array elements are represented as (row, column).

 

Score array after Rule 1 (A cell is worth one point for each mine it is adjacent to) is applied:

 [ [1, 0, 1, 0],
   [1, 1, 2, 1],
   [1, 1, 1, 0],
   [0, 1, 1, 1] ]
Each cell gets a point for every mine it is adjacent to.  A mine cannot be adjacent to itself, so cells with mines get zero points.  The cell at (row: 1, column: 2) gets two points as it is adjacent to two mines.

 

Score array after Rule 2 (Cells directly below a mine are worth 2 points) is applied:

 [ [1, 0, 1, 0],
   [1, 2, 2, 1],
   [1, 1, 1, 0],
   [0, 1, 1, 2] ]
The cells at (1, 1) and (3, 3) each are below a mine and thus are now worth 2 points, overriding what was there previous.

 

Score array after Rule 3 (Cells directly to the right of a mine are worth 0 points) is applied:

 [ [1, 0, 0, 0],
   [1, 2, 2, 1],
   [1, 1, 1, 0],
   [0, 0, 1, 2] ]
The cells at (0, 2) and (3, 1) each are to the right of a mine and are now worth 0 points, overriding what was there previous.

 

Score array after Rule 4 (Cells in an odd row with one or more mines in the row are worth triple) is applied:

 [ [1, 0, 0, 0],
   [1, 2, 2, 1],
   [1, 1, 1, 0],
   [0, 0, 3, 6] ]
Row 3 is an odd row and contains a mine - therefore each cell in this rows is worth triple. Row 1 is odd, but does not contain a mine, so thus it is unchanged.

 

Score array after Rule 5 (Cells that share corners with one or more mines are worth double of what their value would otherwise be) is applied:

 [ [1, 0, 0, 0],
   [2, 2, 4, 1],
   [1, 2, 1, 0],
   [0, 0, 6, 6] ]
Cells (1, 0), (1, 2), (2, 1) and (3, 2) are all doubled since they share a corner with one or more mines.

 

Score array after Rule 6 (Cells that contain mines are worth -1) is applied:

 [ [1, -1, 0, 0],
   [2, 2, 4, 1],
   [1, 2, 1, -1],
   [-1, 0, 6, 6] ]


Q2. Strengthen Passwords
Description
You've been asked to implement a function that will take in an array of potential passwords that are strings and strengthen them according to a set of rules.  Each rule should be applied in order, and applying a rule may affect subsequent rules.  

 

The rules are as follows:

 

1. Replace any instances of 's' or 'S' with 5.

 

2. If the length of the string is odd and the middle character is a digit, replace the middle character with double its value. A string of length one has no middle character.

 

3. If the length of the string is even, swap the first and last characters and flip their capitalization.


4. If the string contains any combination of upper and lower case letters that spell 'NextCapital', reverse the characters of the word 'Next'. Case should be preserved. If 'NextCapital' occurs multiple times, only update the first occurrence.

 

Input Format
The input passwords will be an array, where each element is a string.  All strings will have a length of at least 1.

 

Output Format
An array of strings that corresponds to the input strings after applying all applicable rules.

 

Example
Example Input:

['GoCardinals', 'Doge', 'nExTcapITalxnextcapital', 'ThreeSThree']
 

Example Output:

['GoCardinal5', 'Eogd', 'TxEncapITalxnextcapital', 'Ehree10Thret']
 

Explanation:
GoCardinals => GoCardinal5 by Rule 1.  No other rules apply.

Doge => Eogd by Rule 3.  No other rules apply.

nExTcapITalxnextcapital => TxEncapITalxnextcapital by Rule 4.  No other rules apply.

ThreeSThree => Three5Three (Rule 1) => Three10Three (Rule 2) => Ehree10Thret (Rule 3).  Rule 4 does not apply.
 

Testing
To test against your own custom input, check the 'Test against custom input' box and then type or paste your desired input into the text box below it. The first line should contain a number that is the length of the input array, followed by that many lines each containing a single string (no quotes).

 

For example, to run with ["foo","bar","blah"] you would use:

3
foo
bar
Blah


Q3. HTML Layout
Write the markup and style to create the following layout:

You may approximate any widths, heights, paddings, etc.
The markup should include the denoted letter notation (e.g. A, B, C1) with correct positioning.
The content does NOT need to take up the full height of the browser window.
 


Q4. Beautiful Bike Paths
Description
Greentown has just passed a bill to promote biking by planting flowers alongside the bike path. However, after a recent scandal, Greentown is prohibited from giving the floral contracts to a single florist. Instead, they must hire as many florists as possible that are located along the bike path.

 

Each florist, i, has their own unique flower that they can plant, and they are only able to plant the flower in a specific interval [a_i, b_i) of the bike path. Any given point along the bike path may not contain more than 3 different types of flowers.


Given a bike path of length pathLength and a list of intervals [a_i, b_i) that each represent an individual florist and the interval they can cover, your task is to write a function that will output the maximum number of florists Greentown can hire given that the chosen florist i will cover the whole interval [a_i, b_i).

 

Input Format
The input pathLength is an integer greater than or equal to 0, representing the number of intervals in the bike path.

 

The input floristIntervals will be an array where each element is an array with exactly two integers greater than or equal to 0, each representing an interval for a florist. Either integer in any interval may be greater than pathLength (e.g. extend outside of Greentown).

 

Output Format
An integer that represents the maximum number of florists that Greentown can hire.

 

Example
Example Input:

9, [[1, 10], [1, 6], [2, 8], [3, 5]])
 

Example Output:

3
 

Explanation:
The first parameter, 9, is pathLength, the length of the bike path.  You may assume Greentown's portion of the path behaves like a number line, starting at position 0.

 

The first florist in the given list of intervals is represented by the interval [1, 10).  This means that this florist can cover the portion of the path starting at 1 unit from the start and up to, but not including 10.


Similarly, the second florist can cover [1, 6), the third can cover [2, 8) and the fourth can cover [3, 5).  This exhausts the list of possible florists to be hired.

 

The graph below, shows one possible map of the path and how the flowers will be laid out:



 

Since the fourth florist can only cover a stretch of the path that is already being occupied by three florists, this florist cannot be hired.  Therefore, we can only hire the first 3 of the 4 florists, and thus the function returns 3.